<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryProject1</name>
    </assembly>
    <members>
        <member name="T:TestLibNamespace.Northwestern.ChargedIsotopicDistribution">
            <summary>
            Isotopic Distribution with a given charge.
            </summary>
            <seealso cref="T:TestLibNamespace.Northwestern.IMzIntensityData" />
        </member>
        <member name="M:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.Northwestern.ChargedIsotopicDistribution"/> class.
            </summary>
            <param name="mz">The mz.</param>
            <param name="intensity">The intensity.</param>
            <param name="charge">The charge.</param>
        </member>
        <member name="P:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.Charge">
            <summary>
            Gets the charge.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.GetMz">
            <summary>
            Gets the mz.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.FirstMz">
            <summary>
            Gets the first m/z.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.LastMz">
            <summary>
            Gets the last m/z.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.GetIntensity">
            <summary>
            Gets the intensity.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.CloneWithMostIntensePoints(System.Int32)">
            <summary>
            Clones the distribution with a subset of the most intense points.
            </summary>
            <param name="numberOfPoints">The number of points to keep.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.ChargedIsotopicDistribution.CloneAndShift(System.Double)">
            <summary>
            Clones the distribution and shifts it by an m/z (Th) value.
            </summary>
            <param name="shiftMz">The shift m/z in thomsons (Th).</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IChargedIsotopicDistribution">
            <summary>
            Isotopic Distribution with a given charge in m/z space.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IChargedIsotopicDistribution.Charge">
            <summary>
            Gets the charge.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChargedIsotopicDistribution.CloneWithMostIntensePoints(System.Int32)">
            <summary>
            Clones the distribution with a subset of the most intense points.
            </summary>
            <param name="numberOfPoints">The number of points to keep.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChargedIsotopicDistribution.CloneAndShift(System.Double)">
            <summary>
            Clones the distribution and shifts it by an m/z (Th) value.
            </summary>
            <param name="shiftMz">The shift m/z in thomsons (Th).</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IChemicalFormula">
            <summary>
            A collection of different elements in various quantities.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IChemicalFormula.Item(TestLibNamespace.Northwestern.IElement)">
            <summary>
            Gets the quantity for the specified element.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IChemicalFormula.ElementCounts">
            <summary>
            Gets the element counts.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChemicalFormula.Equals(TestLibNamespace.Northwestern.IChemicalFormula)">
            <summary>
            Determines if this formula equals another.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChemicalFormula.Contains(TestLibNamespace.Northwestern.IElement)">
            <summary>
            Determines whether [contains] [the specified element].
            </summary>
            <param name="element">The element.</param>
            <returns>
              <c>true</c> if [contains] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChemicalFormula.Add(TestLibNamespace.Northwestern.IChemicalFormula)">
            <summary>
            Adds the specified formula.
            </summary>
            <param name="formula">The formula.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChemicalFormula.Subtract(TestLibNamespace.Northwestern.IChemicalFormula)">
            <summary>
            Subtracts the specified formula.
            </summary>
            <param name="formula">The formula.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IChemicalFormula.Multiply(System.Int32)">
            <summary>
            Multiplies the formula by the specified multiplier.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IDualMass">
            <summary>
            Any object that stores both Average and Monoisotopic masses.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IDualMass.GetMass(TestLibNamespace.Northwestern.MassType)">
            <summary>
            Gets the mass.
            </summary>
            <param name="massType">The mass type.</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IElement">
            <summary>
            An Element is a wrapper around a collection of Isotopes
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IElement.AtomicNumber">
            <summary>
            Get the element's atomic number
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IElement.Symbol">
            <summary>
            Gets the element's symbol
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IElement.Isotopes">
            <summary>
            Gets the Isotopes that make up the element
            </summary>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IElementCount">
            <summary>
            Pair of element and its count.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IElementCount.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IElementCount.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IHasName">
            <summary>
            Anything with a name.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IHasName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IIsotope">
            <summary>
            A naturally occurring isotope of an element
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IIsotope.AtomicMass">
            <summary>
            The atomic mass in daltons (Da).
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IIsotope.Abundance">
            <summary>
            The occurance of this isotope relative to others from a given element.
            </summary>
            <value>
            The abundance as a percentage from 0-1.
            </value>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IIsotopicDistribution">
            <summary>
            Neutral distribution of isotopes in a mass spectrometer.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IIsotopicDistribution.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IIsotopicDistribution.Masses">
            <summary>
            Gets the masses.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IIsotopicDistribution.Intensities">
            <summary>
            Gets the intensities.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IIsotopicDistribution.CreateChargedDistribution(System.Int32,System.Boolean)">
            <summary>
            Creates a charged isotopic distribution.
            </summary>
            <param name="charge">The charge.</param>
            <param name="positiveCharge">if set to <c>true</c> [positive charge].</param>
            <returns>A charged isotopic distribution with the same abundances.</returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IIsotopicDistribution.CloneAndShift(System.Double)">
            <summary>
            Clones the distribution and shifts it by a mass (Da) value.
            </summary>
            <param name="shift">The shift mass in daltons (Da).</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IMzIntensityData">
            <summary>
            Represents simple spectral data that contains only m/z and intensity.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IMzIntensityData.FirstMz">
            <summary>
            Gets the first m/z.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IMzIntensityData.LastMz">
            <summary>
            Gets the last m/z.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IMzIntensityData.GetMz">
            <summary>
            Gets the m/z array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IMzIntensityData.GetIntensity">
            <summary>
            Gets the intensity array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IMzIntensityData.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="T:TestLibNamespace.Northwestern.IsotopicDistribution">
            <summary>
            Neutral distribution of isotopes.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IsotopicDistribution.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.Northwestern.IsotopicDistribution" /> class.
            </summary>
            <param name="masses">The masses.</param>
            <param name="abundances">The abundances.</param>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IsotopicDistribution.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.Northwestern.IsotopicDistribution"/> class.
            </summary>
            <param name="masses">The masses.</param>
            <param name="abundances">The abundances.</param>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IsotopicDistribution.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IsotopicDistribution.Masses">
            <summary>
            Gets the masses.
            </summary>
        </member>
        <member name="P:TestLibNamespace.Northwestern.IsotopicDistribution.Intensities">
            <summary>
            Gets the intensities.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IsotopicDistribution.CreateChargedDistribution(System.Int32,System.Boolean)">
            <summary>
            Creates a charged distribution.
            </summary>
            <param name="charge">The charge.</param>
            <param name="positiveCharge">if set to <c>true</c> [positive charge].</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.IsotopicDistribution.CloneAndShift(System.Double)">
            <summary>
            Clones the distribution and shifts it by a constant m/z value.
            </summary>
            <param name="shift">The shift.</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.MassType">
            <summary>
            Masses are either monoisotopic or average.
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MassType.Monoisotopic">
            <summary>
            Unbound, ground-state, rest mass
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MassType.Average">
            <summary>
            Average mass of all isotopes
            </summary>
        </member>
        <member name="T:TestLibNamespace.Northwestern.Mercury7">
            <summary>
            A .NET implementation of the Mercury7 algorithm. Analagous data structures are used whenever possible, 
            e.g., std::vector{double}; replaced with List{double}.
            
            Heavily modified by PMThomas 13 April 2012.
            
            NOTE THE LIBMERCURY C++ LICENSE, LGPLv2! - SEE LIBMERCURY++ COMMENTS.
            
            RTF: I think this is the link, but not confirmed: http://fiehnlab.ucdavis.edu/projects/Seven_Golden_Rules/Isotopic_Pattern_Generator
            RTF: Paper: Efficient calculation of accurate masses of isotopic peaks. JASMS 2006, Rockwood AL, Haimi P.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Mercury7.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.Northwestern.Mercury7"/> class.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Mercury7.GenerateIsotopicDistribution(TestLibNamespace.Northwestern.IChemicalFormula)">
            <summary>
            Calculates the expected isotopic distribution for a given composition.
            </summary>
            <param name="chemicalFormula">The chemical formula.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Mercury7.GenerateChargedIsotopicDistribution(TestLibNamespace.Northwestern.IChemicalFormula,System.Int32)">
            <summary>
            Calculates the expected charged isotopic distribution for a given composition and charge.
            </summary>
            <param name="chemicalFormula">The chemical formula.</param>
            <param name="charge">The charge.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Mercury7.GenerateChargedIsotopicDistributions(TestLibNamespace.Northwestern.IChemicalFormula,System.Int32,System.Int32)">
            <summary>
            Generates a list of charged isotopic distributions using the Mercury algorithm.
            </summary>
            <param name="chemicalFormula">The chemical formula.</param>
            <param name="firstCharge">The first charge.</param>
            <param name="lastCharge">The last charge.</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.MSNumpress">
            <summary>
            Implementations of two compression schemes for numeric data from mass spectrometers.
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.ACC_NUMPRESS_LINEAR">
            <summary>
            MS Numpress linear prediction compression
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.ACC_NUMPRESS_PIC">
            <summary>
            MS Numpress positive integer compression
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.ACC_NUMPRESS_SLOF">
            <summary>
            MS Numpress short logged float compression
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.decode(System.String,System.Byte[],System.Int32)">
            <summary>
            Convenience function for decoding binary data encoded by MSNumpress.
            </summary>
            <param name="cvAccession">The PSI-MS obo CV accession of the encoded data.</param>
            <param name="data">array of byte to be decoded.</param>
            <param name="dataSize">number of bytes from data to decode.</param>
            <returns>The decoded doubles</returns>
            <exception cref="T:System.ArgumentException">
            Cannot decode numLin data, need at least 8 initial bytes for fixed point.
            or
            Corrupt numLin data!
            or
            Cannot decode numPic data, need at least 8 initial bytes for fixed point.
            or
            Corrupt numPic data!
            or
            '" + cvAccession + "' is not a numpress compression term
            </exception>
            <remarks>
            If the passed cvAccession is one of
            
               ACC_NUMPRESS_LINEAR = "MS:1002312"
               ACC_NUMPRESS_PIC    = "MS:1002313"
               ACC_NUMPRESS_SLOF   = "MS:1002314"
            
            the corresponding decode function will be called.
            </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encode(System.String,System.Double[],System.Int32)">
            <summary>
            Convenience function for encoding floating point data using MSNumpress.
            </summary>
            <param name="cvAccession">The PSI-MS obo CV accession to use to encode the data.</param>
            <param name="data">array of double to be encoded.</param>
            <param name="dataSize">number of doubles from data to encode.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Corrupt numLin data!
            or
            Corrupt numPic data!
            or
            '" + cvAccession + "' is not a numpress compression term
            </exception>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encodeInt(System.Int64,System.Byte[],System.Int32)">
            <summary>
            This encoding works on a 4 byte integer, by truncating initial zeros or ones.
            </summary>
            <param name="x">the int to be encoded</param>
            <param name="res">the byte array were halfbytes are stored</param>
            <param name="resOffset">position in res were halfbytes are written</param>
            <returns>the number of resulting halfbytes</returns>
            <remarks>
            If the initial (most significant) half byte is 0x0 or 0xf, the number of such 
            halfbytes starting from the most significant is stored in a halfbyte. This initial 
            count is then followed by the rest of the ints halfbytes, in little-endian order. 
            A count halfbyte c of
            
            		0 &lt;= c &lt;= 8 		is interpreted as an initial c 		0x0 halfbytes 
            		9 &lt;= c &lt;= 15		is interpreted as an initial (c-8) 	0xf halfbytes
            
            Ex:
            	int		c		rest
            	0 	=> 	0x8
            	-1	=>	0xf		0xf
            	23	=>	0x6 	0x7	0x1
            
            	@x			the int to be encoded
            @res		the byte array were halfbytes are stored
            @resOffset	position in res were halfbytes are written
            @return		the number of resulting halfbytes
            </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encodeFixedPoint(System.Double,System.Byte[])">
            <summary>
            Encodes the fixed point.
            </summary>
            <param name="fixedPoint">The fixed point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.decodeFixedPoint(System.Byte[])">
            <summary>
            Decodes the fixed point.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.optimalLinearFixedPoint(System.Double[],System.Int32)">
            <summary>
            Get the optimal fixed point for linear compression.
            </summary>
            <param name="data">The data.</param>
            <param name="dataSize">Size of the data.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encodeLinear(System.Double[],System.Int32,System.Byte[],System.Double)">
             <summary>
             Encodes data using MS Numpress linear prediction compression.
             </summary>
             <param name="data">array of doubles to be encoded</param>
             <param name="dataSize">number of doubles from data to encode</param>
             <param name="result">array were resulting bytes should be stored</param>
             <param name="fixedPoint">the scaling factor used for getting the fixed point repr. This is stored in the binary and automatically extracted on decoding.</param>
             <returns>the number of encoded bytes</returns>
             <remarks>
             Encodes the doubles in data by first using a 
               - lossy conversion to a 4 byte 5 decimal fixed point repressentation
               - storing the residuals from a linear prediction after first two values
               - encoding by encodeInt (see above) 
             
             The resulting binary is maximally 8 + dataSize * 5 bytes, but much less if the 
             data is reasonably smooth on the first order.
            
             This encoding is suitable for typical m/z or retention time binary arrays. 
             On a test set, the encoding was empirically show to be accurate to at least 0.002 ppm.
             </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.decodeLinear(System.Byte[],System.Int32,System.Double[])">
             <summary>
             Decodes data using MS Numpress linear prediction compression.
             </summary>
             <param name="data">array of bytes to be decoded</param>
             <param name="dataSize">number of bytes from data to decode</param>
             <param name="result">array were resulting doubles should be stored</param>
             <returns>the number of decoded doubles, or -1 if dataSize &lt; 4 or 4 &lt; dataSize &lt; 8</returns>
             <remarks>
             Result vector guaranteed to be shorter or equal to (|data| - 8) * 2
            
             Note that this method may throw a ArrayIndexOutOfBoundsException if it deems the input data to 
             be corrupt, i.e. that the last encoded int does not use the last byte in the data. In addition 
             the last encoded int need to use either the last halfbyte, or the second last followed by a 
             0x0 halfbyte. 
             </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encodePic(System.Double[],System.Int32,System.Byte[])">
            <summary>
            Encodes ion counts by simply rounding to the nearest 4 byte integer, and compressing each integer with encodeInt.
            </summary>
            <param name="data">array of doubles to be encoded</param>
            <param name="dataSize">number of doubles from data to encode</param>
            <param name="result">array were resulting bytes should be stored</param>
            <returns>the number of encoded bytes</returns>
            <remarks>
            The handleable range is therefore 0 -> 4294967294.
            The resulting binary is maximally dataSize * 5 bytes, but much less if the 
            data is close to 0 on average.
            </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.decodePic(System.Byte[],System.Int32,System.Double[])">
             <summary>
             Decodes data encoded by encodePic.
             </summary>
             <param name="data">array of bytes to be decoded (need memorycont. repr.)</param>
             <param name="dataSize">number of bytes from data to decode</param>
             <param name="result">array were resulting doubles should be stored</param>
             <returns>the number of decoded doubles</returns>
             <remarks>
             Result vector guaranteed to be shorter of equal to |data| * 2
            
             Note that this method may throw a ArrayIndexOutOfBoundsException if it deems the input data to 
             be corrupt, i.e. that the last encoded int does not use the last byte in the data. In addition 
             the last encoded int need to use either the last halfbyte, or the second last followed by a 
             0x0 halfbyte. 
             </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.optimalSlofFixedPoint(System.Double[],System.Int32)">
            <summary>
            Gets the optimal fixed point for SLOF compression.
            </summary>
            <param name="data">The data.</param>
            <param name="dataSize">Size of the data.</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.encodeSlof(System.Double[],System.Int32,System.Byte[],System.Double)">
             <summary>
             Encodes ion counts by taking the natural logarithm, and storing a fixed point representation of this.
             </summary>
             <param name="data">array of doubles to be encoded</param>
             <param name="dataSize">number of doubles from data to encode</param>
             <param name="result">array were resulting bytes should be stored</param>
             <param name="fixedPoint">the scaling factor used for getting the fixed point repr. This is stored in the binary and automatically extracted on decoding.</param>
             <returns>the number of encoded bytes</returns>
             <remarks>
             Encodes ion counts by taking the natural logarithm, and storing a
             fixed point representation of this. This is calculated as
             
             unsigned short fp = log(d+1) * fixedPoint + 0.5
            
             the result vector is exactly |data| * 2 + 8 bytes long
             </remarks>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.decodeSlof(System.Byte[],System.Int32,System.Double[])">
            <summary>
            Decodes data encoded by encodeSlof.
            </summary>
            <param name="data">array of bytes to be decoded (need memorycont. repr.)</param>
            <param name="dataSize">number of bytes from data to decode</param>
            <param name="result">array were resulting doubles should be stored</param>
            <returns>the number of decoded doubles</returns>
            <remarks>
            The result vector will be exactly (|data| - 8) / 2 doubles.
            returns the number of doubles read, or -1 is there is a problem decoding.
            </remarks>
        </member>
        <member name="T:TestLibNamespace.Northwestern.MSNumpress.IntDecoder">
            <summary>
            Decodes ints from the half bytes in bytes. Lossless reverse of encodeInt, although not symmetrical in input arguments.
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.IntDecoder.pos">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.IntDecoder.half">
            <summary>
            The half byte flag
            </summary>
        </member>
        <member name="F:TestLibNamespace.Northwestern.MSNumpress.IntDecoder.bytes">
            <summary>
            The bytes
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.IntDecoder.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.Northwestern.MSNumpress.IntDecoder"/> class.
            </summary>
            <param name="_bytes">The bytes.</param>
            <param name="_pos">The position.</param>
        </member>
        <member name="M:TestLibNamespace.Northwestern.MSNumpress.IntDecoder.next">
            <summary>
            Get the next number given the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.Northwestern.Utility">
            <summary>
            Northwestern Utility functions.
            </summary>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Utility.SubSequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a subsequence of a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">A sequence of values.</param>
            <param name="start">Inclusive start index (zero-based). </param>
            <param name="end">Inclusive end index (zero-based).</param>
            <returns>The subsequence.</returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Utility.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TOut">The type of the value returned by selector.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An IEnumerable whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Utility.ConvertMzToMass(System.Double,System.Int32,System.Boolean)">
            <summary>
            Converts the m/z to mass.
            </summary>
            <param name="mz">The m/z.</param>
            <param name="charge">The charge.</param>
            <param name="positiveCharge">if set to <c>true</c> [positive charge].</param>
            <returns></returns>
        </member>
        <member name="M:TestLibNamespace.Northwestern.Utility.ConvertMassToMz(System.Double,System.Int32,System.Boolean)">
            <summary>
            Converts the mass to m/z.
            </summary>
            <param name="mass">The mass.</param>
            <param name="charge">The charge.</param>
            <param name="positiveCharge">if set to <c>true</c> [positive charge].</param>
            <returns></returns>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaKey">
            <summary>
            Possible keys for a ProFormaDescriptor
            </summary>
        </member>
        <member name="F:TestLibNamespace.ProForma.ProFormaKey.Mod">
            <summary>
            The modification
            </summary>
        </member>
        <member name="F:TestLibNamespace.ProForma.ProFormaKey.Mass">
            <summary>
            The mass
            </summary>
        </member>
        <member name="F:TestLibNamespace.ProForma.ProFormaKey.Formula">
            <summary>
            The formula (in Unimod notation)
            </summary>
        </member>
        <member name="F:TestLibNamespace.ProForma.ProFormaKey.Info">
            <summary>
            The user defined extra information
            </summary>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaDescriptor">
            <summary>
            Member of the tag. Could be a key-value pair, or a keyless entry.
            </summary>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.ProForma.ProFormaDescriptor"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaDescriptor.#ctor(System.String)">
            <summary>
            Initializes a descriptor without value only
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaDescriptor.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaDescriptor.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaParseException">
            <summary>
            Base ProForma parsing exception.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.ProForma.ProFormaParseException"/> class.
            </summary>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.ProForma.ProFormaParseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaParser">
            <summary>
            Parser for the ProForma proteoform notation (link here to published manuscript)
            </summary>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaParser.ParseString(System.String)">
            <summary>
            Parses the ProForma string.
            </summary>
            <param name="proFormaString">The pro forma string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">proFormaString</exception>
            <exception cref="T:TestLibNamespace.ProForma.ProFormaParseException">
            X is not allowed.
            </exception>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaTag">
            <summary>
            The specified way of writing a localized modification. Everything between ‘[‘ and ‘]’ (inclusive). A collection of descriptors.
            </summary>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaTag.#ctor(System.Int32,System.Collections.Generic.ICollection{TestLibNamespace.ProForma.ProFormaDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.ProForma.ProFormaTag"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="descriptors">The descriptors.</param>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaTag.Index">
            <summary>
            Gets the zero-based index in the sequence.
            </summary>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaTag.Descriptors">
            <summary>
            Gets the descriptors.
            </summary>
        </member>
        <member name="T:TestLibNamespace.ProForma.ProFormaTerm">
            <summary>
            Represents a ProForma string in memory.
            </summary>
        </member>
        <member name="M:TestLibNamespace.ProForma.ProFormaTerm.#ctor(System.String,System.Collections.Generic.ICollection{TestLibNamespace.ProForma.ProFormaTag})">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibNamespace.ProForma.ProFormaTerm"/> class.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaTerm.Sequence">
            <summary>
            Gets the amino acid sequence.
            </summary>
        </member>
        <member name="P:TestLibNamespace.ProForma.ProFormaTerm.Tags">
            <summary>
            Gets the tags.
            </summary>
        </member>
        <member name="T:Chemistry.ChemicalFormula">
            <summary>
            A chemical formula class. This does NOT correspond to a physical object. A physical object can have a chemical formula.
            Formula can change!!! If isotopes or elements are changed.
            </summary>
        </member>
        <member name="F:Chemistry.ChemicalFormula.FormulaRegex">
            <summary>
            A regular expression for matching chemical formulas such as: C2C{13}3H5NO5
            \s* (at end as well) allows for optional spacing among the elements, i.e. C2 C{13}3 H5 N O5
            The first group is the only non-optional group and that handles the chemical symbol: H, He, etc..
            The second group is optional, which handles isotopes of elements: C{13} means carbon-13, while C is the carbon element with unspecified mass number
            The third group is optional and indicates if we are adding or subtracting the elements form the formula, C-2C{13}5 would mean first subtract 2 carbons and then add 5 carbon-13
            The fourth group is optional and represents the number of isotopes or elements to add, if not present it assumes 1: H2O means 2 Hydrogen and 1 Oxygen
            Modified from: http://stackoverflow.com/questions/4116786/parsing-a-chemical-formula-from-a-string-in-c
            </summary>
        </member>
        <member name="F:Chemistry.ChemicalFormula.ValidateFormulaRegex">
            <summary>
            A wrapper for the formula regex that validates if a string is in the correct chemical formula format or not
            </summary>
        </member>
        <member name="M:Chemistry.ChemicalFormula.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Chemistry.ChemicalFormula"/> class.
            </summary>
        </member>
        <member name="M:Chemistry.ChemicalFormula.#ctor(Chemistry.ChemicalFormula)">
            <summary>
            Initializes a new instance of the <see cref="T:Chemistry.ChemicalFormula"/> class.
            </summary>
            <param name="capFormula">The cap formula.</param>
        </member>
        <member name="P:Chemistry.ChemicalFormula.AverageMass">
            <summary>
            Gets the average mass of this chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.MonoisotopicMass">
            <summary>
            Gets the monoisotopic mass of this chemical formula: for elements use the principle isotope mass, not average mass
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.AtomCount">
            <summary>
            Gets the number of atoms in this chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.NumberOfUniqueElementsByAtomicNumber">
            <summary>
            Gets the number of unique chemical elements in this chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.NumberOfUniqueIsotopes">
            <summary>
            Gets the number of unique chemical isotopes in this chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.Formula">
            <summary>
            Gets the string representation (Hill Notation) of this chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.ProtonCount">
            <summary>
            Gets the proton count.
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.HydrogenCarbonRatio">
            <summary>
            The ratio of the number of Carbon to Hydrogen in this chemical formula
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chemistry.ChemicalFormula.Isotopes">
            <summary>
            Gets the isotopes.
            </summary>
        </member>
        <member name="P:Chemistry.ChemicalFormula.Elements">
            <summary>
            Gets the elements.
            </summary>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Combine(System.Collections.Generic.IEnumerable{Chemistry.IHasChemicalFormula})">
            <summary>
            Combines the specified formulas.
            </summary>
            <param name="formulas">The formulas.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.ParseFormula(System.String)">
            <summary>
            Parses a string representation of chemical formula and adds the elements
            to this chemical formula
            </summary>
            <param name="formula">the Chemical Formula to parse</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.NeutronCount">
            <summary>
            Neutrons the count.
            </summary>
            <returns></returns>
            <exception cref="T:Chemistry.TestLibException">Cannot know for sure what the number of neutrons is!</exception>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Replace(Chemistry.Isotope,Chemistry.Isotope)">
            <summary>
            Replaces one isotope with another.
            Replacement happens on a 1 to 1 basis, i.e., if you remove 5 you will add 5
            </summary>
            <param name="isotopeToRemove">The isotope to remove</param>
            <param name="isotopeToAdd">The isotope to add</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Add(Chemistry.IHasChemicalFormula)">
            <summary>
            Add a chemical formula containing object to this chemical formula
            </summary>
            <param name="item">The object that contains a chemical formula</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Multiply(System.Int32)">
            <summary>
            Multiplies the chemical formula by the specified multiplier.
            </summary>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Add(Chemistry.ChemicalFormula)">
            <summary>
            Add a chemical formula to this chemical formula.
            </summary>
            <param name="formula">The chemical formula to add to this</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.AddPrincipalIsotopesOf(Chemistry.Element,System.Int32)">
            <summary>
            Add the principal isotope of the element to this chemical formula
            given its chemical symbol
            </summary>
            <param name="element">The chemical element to add</param>
            <param name="count">The number of the element to add</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Add(Chemistry.Element,System.Int32)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Add(Chemistry.Isotope,System.Int32)">
            <summary>
            Add an isotope to this chemical formula
            </summary>
            <param name="isotope">The isotope to add</param>
            <param name="count">The number of the isotope to add</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Remove(Chemistry.IHasChemicalFormula)">
            <summary>
            Remove a chemical formula containing object from this chemical formula
            </summary>
            <param name="item">The object that contains a chemical formula</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Remove(Chemistry.ChemicalFormula)">
            <summary>
            Remove a chemical formula from this chemical formula
            </summary>
            <param name="formula">The chemical formula to remove</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Remove(Chemistry.Element,System.Int32)">
            <summary>
            Remove the provided number of elements (not isotopes!) from formula
            </summary>
            <param name="element">The chemical element to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Remove(Chemistry.Isotope,System.Int32)">
            <summary>
            Remove a isotope from this chemical formula
            </summary>
            <param name="isotope">The isotope to remove</param>
            <param name="count">The number of isotopes to remove</param>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Remove(Chemistry.Isotope)">
            <summary>
            Completely removes a particular isotope from this chemical formula.
            </summary>
            <param name="isotope">The isotope to remove</param>
            <returns>Number of removed isotopes</returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.RemoveIsotopesOf(Chemistry.Element)">
            <summary>
            Remove all the isotopes of an chemical element from this
            chemical formula
            </summary>
            <param name="element">The chemical element to remove</param>
            <returns>Number of removed isotopes</returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Clear">
            <summary>
            Remove all isotopes and elements
            </summary>
        </member>
        <member name="M:Chemistry.ChemicalFormula.ContainsIsotopesOf(Chemistry.Element)">
            <summary>
            Checks if any isotope of the specified element is present in this chemical formula
            </summary>
            <param name="element">The element to look for</param>
            <returns>True if there is a non-zero number of the element in this formula</returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.IsSubsetOf(Chemistry.ChemicalFormula)">
            <summary>
            Determines whether [is subset of] [the specified formula].
            </summary>
            <param name="formula">The formula.</param>
            <returns>
              <c>true</c> if [is subset of] [the specified formula]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.IsSupersetOf(Chemistry.ChemicalFormula)">
            <summary>
            Checks whether this formula contains all the isotopes of the specified formula
            MIGHT CONSIDER ELEMENTS TO BE SUPERSET OF ISOTOPES IF NEEDED!!!
            Right now they are distinct
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.ContainsSpecificIsotope(Chemistry.Element,System.Int32)">
            <summary>
            Determines whether [contains specific isotope] [the specified element].
            </summary>
            <param name="element">The element.</param>
            <param name="atomicNumber">The atomic number.</param>
            <returns>
              <c>true</c> if [contains specific isotope] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.ContainsSpecificIsotope(Chemistry.Isotope)">
            <summary>
            Checks if the isotope is present in this chemical formula
            </summary>
            <param name="isotope">The isotope to look for</param>
            <returns>True if there is a non-negative number of the isotope in this formula</returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.CountSpecificIsotopes(Chemistry.Isotope)">
            <summary>
            Return the number of given isotopes in this chemical fomrula
            </summary>
            <param name="isotope"></param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.CountWithIsotopes(Chemistry.Element)">
            <summary>
            Count the number of isotopes and elements from this element that are
            present in this chemical formula
            </summary>
            <param name="element">The element to search for</param>
            <returns>The total number of all the element isotopes in this chemical formula</returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.CountSpecificIsotopes(Chemistry.Element,System.Int32)">
            <summary>
            Counts the specific isotopes.
            </summary>
            <param name="element">The element.</param>
            <param name="massNumber">The mass number.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.Equals(Chemistry.ChemicalFormula)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Chemistry.ChemicalFormula.GetHillNotation">
            <summary>
            Produces the Hill Notation of the chemical formula
            </summary>
        </member>
        <member name="T:Chemistry.ClassExtensions">
            <summary>
            Extension methods for converting to mass or m/z.
            </summary>
        </member>
        <member name="M:Chemistry.ClassExtensions.ToMz(Chemistry.IHasMass,System.Int32)">
            <summary>
            Calculates m/z value for a given mass assuming charge comes from losing or gaining protons
            </summary>
        </member>
        <member name="M:Chemistry.ClassExtensions.ToMz(System.Double,System.Int32)">
            <summary>
            Calculates m/z value for a given mass assuming charge comes from losing or gaining protons
            </summary>
        </member>
        <member name="M:Chemistry.ClassExtensions.ToMass(System.Double,System.Int32)">
            <summary>
            Determines the original mass from an m/z value, assuming charge comes from a proton
            </summary>
        </member>
        <member name="T:Chemistry.Constants">
             <summary>
             A collection of immutable constants and physical properties.
             Masses are given for the most abundant isotope unless otherwise stated
            
             Sources include:
             http://physics.nist.gov/cuu/Constants/index.html
             </summary>
        </member>
        <member name="F:Chemistry.Constants.protonMass">
            <summary>
            The mass of the subatomic particle with a single elementary charge in atomic
            units (u)
            </summary>
        </member>
        <member name="F:Chemistry.Constants.electronMass">
            <summary>
            The electron mass in atomic units (u)
            </summary>
        </member>
        <member name="F:Chemistry.Constants.MaximumNumberOfElementsAllowed">
            <summary>
            The largest number of elements to consider
            </summary>
        </member>
        <member name="F:Chemistry.Constants.MaximumMassNumberPossible">
            <summary>
            The largest mass number
            </summary>
        </member>
        <member name="T:Chemistry.Element">
            <summary>
            Represents a single chemical element. Elements comprises of multiple
            isotopes, with the element mass being a weighted average of all the
            isotopes atomic masses weighted by their natural relative abundance.
            </summary>
        </member>
        <member name="F:Chemistry.Element.IsotopesByMassNumber">
            <summary>
            The element's isotopes stored based on their mass number
            </summary>
        </member>
        <member name="F:Chemistry.Element.IsotopesInOrderTheyWereAdded">
            <summary>
            The element's isotopes stored in order they were added
            </summary>
        </member>
        <member name="M:Chemistry.Element.#ctor(System.String,System.Int32,System.Double)">
            <summary>
            Create a new element
            </summary>
            <param name="symbol">The symbol of the element</param>
            <param name="atomicNumber">The atomic number of the element</param>
            <param name="averageMass">The averageMass of the element</param>
        </member>
        <member name="P:Chemistry.Element.Isotopes">
            <summary>
            Gets all isotopes of an element
            </summary>
        </member>
        <member name="P:Chemistry.Element.AtomicNumber">
            <summary>
            The atomic number of this element (also the number of protons)
            </summary>
        </member>
        <member name="P:Chemistry.Element.AtomicSymbol">
            <summary>
            The atomic symbol of this element
            </summary>
        </member>
        <member name="P:Chemistry.Element.AverageMass">
            <summary>
            The average mass of all this element's isotopes weighted by their
            relative natural abundance (in unified atomic mass units)
            </summary>
        </member>
        <member name="P:Chemistry.Element.PrincipalIsotope">
            <summary>
            The most abundant (principal) isotope of this element
            </summary>
        </member>
        <member name="P:Chemistry.Element.Protons">
            <summary>
            Gets the protons.
            </summary>
        </member>
        <member name="P:Chemistry.Element.Item(System.Int32)">
            <summary>
            Gets an isotope of this element based on its mass number
            </summary>
        </member>
        <member name="M:Chemistry.Element.op_Implicit(System.Int32)~Chemistry.Element">
            <summary>
            Can use an integer instead of an element anytime you like
            </summary>
            <param name="atomicNumber"></param>
        </member>
        <member name="M:Chemistry.Element.op_Implicit(System.String)~Chemistry.Element">
            <summary>
            Can use the atomic symbol instead of an element anytime you like
            </summary>
        </member>
        <member name="M:Chemistry.Element.ToString">
            <summary>
            Returns the atomic symbol
            </summary>
            <returns>The atomic symbol</returns>
        </member>
        <member name="M:Chemistry.Element.AddIsotope(System.Int32,System.Double,System.Double)">
            <summary>
            Add an isotope to this element
            </summary>
            <param name="massNumber">The mass number of the isotope</param>
            <param name="atomicMass">The atomic mass of the isotope </param>
            <param name="abundance">The natural relative abundance of the isotope</param>
            <returns>The created isotopes that is added to this element</returns>
        </member>
        <member name="T:Chemistry.IHasChemicalFormula">
            <summary>
            An object that has a chemical formula
            </summary>
        </member>
        <member name="P:Chemistry.IHasChemicalFormula.ThisChemicalFormula">
            <summary>
            The chemical formula of this object
            </summary>
        </member>
        <member name="T:Chemistry.IHasMass">
             <summary>
            
             </summary>
        </member>
        <member name="P:Chemistry.IHasMass.MonoisotopicMass">
            <summary>
            The monoisotopic mass of this object
            </summary>
        </member>
        <member name="T:Chemistry.Isotope">
            <summary>
            Represents a single isotope of a chemical element. Contains a unique number
            of protons and neutrons compared to every other isotope.
            </summary>
        </member>
        <member name="M:Chemistry.Isotope.#ctor(Chemistry.Element,System.Int32,System.Double,System.Double)">
            <summary>
            Create a new isotope
            </summary>
            <param name="parentElement">The parent element of the isotope</param>
            <param name="massNumber">The mass number of the isotope</param>
            <param name="atomicMass">The atomic mass of the isotope</param>
            <param name="abundance">The natural relative abundance of the isotope</param>
        </member>
        <member name="P:Chemistry.Isotope.AtomicNumber">
            <summary>
            The atomic number of the isotope's parent element (also the number of protons)
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.Protons">
            <summary>
            The number of protons in this isotope
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.Neutrons">
            <summary>
            The number of neutrons in this isotope
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.Element">
            <summary>
            The element this isotope is apart of (based on atomic number)
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.AtomicMass">
            <summary>
            The atomic mass of this isotope (in unified atomic mass units)
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.MassNumber">
            <summary>
            The total number of nucleons (protons and neutrons) in this isotope
            </summary>
        </member>
        <member name="P:Chemistry.Isotope.RelativeAbundance">
            <summary>
            The relative natural abundance of this isotope in nature (on Earth)
            </summary>
        </member>
        <member name="M:Chemistry.Isotope.ToString">
            <summary>
            Returns a textual representation of this isotope in the following format: H{1} He{4} O{16}
            </summary>
            <returns>The atomic symbol and mass number combined</returns>
        </member>
        <member name="T:Chemistry.IsotopicDistribution">
             <summary>
             Calculates the isotopic distributions of molecules
             </summary>
             <remarks>
             C# version by Derek Bailey 2014
             Modified by Stefan Solntsev 2016
            
             This is a port of software written in C++ and detailed in the following publication:
            
             Molecular Isotopic Distribution Analysis (MIDAs) with Adjustable Mass Accuracy.
             Gelio Alves, Aleksy Y. Ogurtsov, and Yi-Kuo Yu
             J. Am. Soc. Mass Spectrom. (2014) 25:57-70
             DOI: 10.1007/s13361-013-0733-7
            
             Please cite that publication if using these algorithms in your own publications.
            
             Only calculates the fine grained distribution.
             </remarks>
        </member>
        <member name="P:Chemistry.IsotopicDistribution.Masses">
            <summary>
            Gets the masses.
            </summary>
        </member>
        <member name="P:Chemistry.IsotopicDistribution.Intensities">
            <summary>
            Gets the intensities.
            </summary>
        </member>
        <member name="M:Chemistry.IsotopicDistribution.GetDistribution(Chemistry.ChemicalFormula)">
            <summary>
            Gets the distribution.
            </summary>
            <param name="formula">The formula.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.IsotopicDistribution.GetDistribution(Chemistry.ChemicalFormula,System.Double)">
            <summary>
            Gets the distribution.
            </summary>
            <param name="formula">The formula.</param>
            <param name="fineResolution">The fine resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.IsotopicDistribution.GetDistribution(Chemistry.ChemicalFormula,System.Double,System.Double)">
            <summary>
            Gets the distribution.
            </summary>
            <param name="formula">The formula.</param>
            <param name="fineResolution">The fine resolution.</param>
            <param name="minProbability">The minimum probability.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.IsotopicDistribution.GetDistribution(Chemistry.ChemicalFormula,System.Double,System.Double,System.Double)">
            <summary>
            Gets the distribution.
            </summary>
            <param name="formula">The formula.</param>
            <param name="fineResolution">The fine resolution.</param>
            <param name="minProbability">The minimum probability.</param>
            <param name="molecularWeightResolution">The molecular weight resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Chemistry.IsotopicDistribution.GetNewFineAndMergeResolutions(System.Double)">
            <summary>
            Calculates the fineResolution and mergeFineResolution parameters
            </summary>
            <returns>Tuple of fineResolution and mergeFineResolution</returns>
        </member>
        <member name="T:Chemistry.PeriodicTable">
            <summary>
            A static store of elements accessible by anyone
            </summary>
        </member>
        <member name="F:Chemistry.PeriodicTable._elements">
            <summary>
            The internal dictionary housing elements, keyed by their unique atomic symbol
            </summary>
        </member>
        <member name="F:Chemistry.PeriodicTable._elementsArray">
            <summary>
            The internal dictionary housing elements, keyed by their unique atomic number
            </summary>
        </member>
        <member name="M:Chemistry.PeriodicTable.Add(Chemistry.Element)">
            <summary>
            Populate the periodic table by calling this method
            </summary>
        </member>
        <member name="M:Chemistry.PeriodicTable.GetElement(System.String)">
            <summary>
            Fast method for getting an element by its atomic symbol
            </summary>
        </member>
        <member name="M:Chemistry.PeriodicTable.GetElement(System.Int32)">
            <summary>
            Fast method for getting an element by its atomic number
            </summary>
        </member>
        <member name="M:Chemistry.PeriodicTable.ValidateAbundances(System.Double)">
            <summary>
            Validates the abundances in the periodic table
            </summary>
        </member>
        <member name="M:Chemistry.PeriodicTable.ValidateAverageMasses(System.Double)">
            <summary>
            Validates the average masses in the periodic table
            </summary>
        </member>
        <member name="T:Chemistry.TestLibException">
            <summary>
            Base exception for the library.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Chemistry.TestLibException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Chemistry.TestLibException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:UsefulProteomicsDatabases.PeriodicTableLoader">
            <summary>
            The Periodic Table of Elements.
            </summary>
        </member>
        <member name="M:UsefulProteomicsDatabases.PeriodicTableLoader.Load(System.String)">
            <summary>
            Loads from the specified element location.
            </summary>
            <param name="elementLocation">The element location.</param>
        </member>
    </members>
</doc>
